import type { AnyFieldProperties, FieldType } from 'kintone-effect-schema';

// App fields configuration type (generated by kintone-effect-schema)
export interface AppFieldsConfig {
  properties: Record<string, AnyFieldProperties>;
}

// App schema definition
export interface AppSchema {
  appId: number | string;
  name: string;
  description?: string;
  fieldsConfig: AppFieldsConfig;
}

// Auth configuration types
export interface PasswordAuth {
  baseUrl: string;
  username: string;
  password: string;
}

export interface ApiTokenAuth {
  baseUrl: string;
  apiToken: string;
}

export type AuthConfig = PasswordAuth | ApiTokenAuth;

// Environment configuration
export interface EnvironmentConfig {
  auth: AuthConfig;
}

// Main configuration
export interface Config {
  default: string;
  environments: Record<string, EnvironmentConfig>;
}

// Helper function to define app schema
export function defineAppSchema(schema: AppSchema): AppSchema {
  return schema;
}

// Helper function to get app ID from environment variable
export function getAppId(envVarName: string): string {
  const appId = process.env[envVarName];
  if (!appId) {
    throw new Error(`Environment variable ${envVarName} is not set`);
  }
  return appId;
}

// Utility: Deeply make all properties writable (remove readonly)
export type Mutable<T> = { -readonly [P in keyof T]: Mutable<T[P]> };

// Field update payload for partial updates on kintone API
export type DefaultValueType = string | readonly string[] | readonly { code: string; type: string }[];

export interface FieldUpdatePayload {
  type: FieldType;
  code: string;
  label?: string;
  noLabel?: boolean;
  required?: boolean;
  defaultValue?: DefaultValueType;
  minLength?: string;
  maxLength?: string;
  minValue?: string;
  maxValue?: string;
  align?: 'HORIZONTAL' | 'VERTICAL';
  options?: Record<string, { label: string; index: string }>;
  unique?: boolean;
  expression?: string;
  hideExpression?: boolean;
  digit?: boolean;
  displayScale?: string;
  unit?: string;
  unitPosition?: 'BEFORE' | 'AFTER';
  entities?: Array<{ code: string; type: string }>;
  defaultNowValue?: boolean;
  protocol?: 'WEB' | 'CALL' | 'MAIL';
  thumbnailSize?: '50' | '150' | '250' | '500';
  openGroup?: boolean;
  fields?: Record<string, any>;
}
